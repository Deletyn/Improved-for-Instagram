Scrollbar height => durch avg. von sichtbaren * totalItems
-> nur größer werden, wenn ende erreicht + scroll pos korrigieren [saved height changes]

//Unload videos / imgs of out of bounds media?

Breite 1x berechnen, dann static, oder eine 100% sentinel nehmen

<div class="list-wrapper">
  <div class="list">
    <div class="chunk" style="transform: translateY(' + chunk.offset + 'px)">
        <div class="sentinel-top" v-if="index === 0" v-bind:class="{disabled: lastChunk < 3}"></div>
        <div class="list-item" v-for="(item, index) in chunk.items">
          <list-item class="item-inner" :item="item" :id="'item-' + index"></list-item>
        </div>
        <div class="sentinel-bottom" v-if="index === chunks.length - 1" v-bind:class="{disabled: startFlag}"></div>
      </div>
   </div>
</div>

https://github.com/jaredLunde/masonic/blob/master/src/index.tsx -> krasse algos

+ Nur äußerer Div muss transformed werden
+ Unterschiedliche Höhe Items per Row egal, da sentinel immer ganz unten
+ Keine Berechnung von Y in dem Chunk notwendig
- Masonry nicht möglich, da bei unterschiedlichen Höhen nächster Chunk nicht hoch kann -> + egal
^ Fixbar mit: N Bottom Sentinels, wobei N die Anzahl von Columns ist; Chunk Wrapper Y-(min(sentinels Y)), rest der Items N Y + Sentinel prev. Row N Y



https://github.com/DmitrySkripkin/vue-virtual-scroll-demo/blob/master/src/components/List.vue
Sentinel top / bottom -> intersection observer -> read bounds .top, rAF set transform
ggf. mit margin, sofern top dann noch stimmt!
trackVisibility: false for perf? => sonst min. 100ms; delay: 100??

Immer 3 à sichtbar*X (=2)? chunks:

3er:
1st-block (hidden)  Y:
2nd-block (initial) Y: n := n+sentinel-top position speichern
3rd-block	(initial)	Y: m := m+sentinel-top

Initial scroll nach unten:
n = 0
m = 0 + sentinel-top position

1st-block sentinel-top:
2nd-block set transformY m + absolute

1st-block sentinel-bottom: /

2nd-block sentinel-top: /
append 3rd-block w/ transform + absolute

2nd-block sentinel-bottom:
1st-block set transformY n + absolute
save n

3rd-block sentinel-top:
1st-block = 2nd-block
2nd-block = 3rd-block
-> continue 1st-block



3rd-block sentinel-bottom: / (unreachable)